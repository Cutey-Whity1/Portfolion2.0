import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
import logic
from config import token

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(token)  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON
data = logic.open_json("tbl.json")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_keyboard(buttons):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    for button in buttons:
        keyboard.add(KeyboardButton(button))
    return keyboard

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
def format_project(project_name, project_data):
    statuses = data["Status_id"]
    skills = data["skill_id"]
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ ID
    status_name = [k for k, v in statuses.items() if v == project_data["status_id"]][0]
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤ –ø–æ ID
    skill_names = []
    for skill_id in project_data["skill_id"]:
        skill_name = [k for k, v in skills.items() if v == skill_id][0]
        skill_names.append(skill_name)
    
    return (
        f"üìå <b>{project_name}</b>\n\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {project_data['desc']}\n"
        f"üåê –°—Å—ã–ª–∫–∞: {project_data['irl']}\n"
        f"üõ† –ù–∞–≤—ã–∫–∏: {', '.join(skill_names)}\n"
        f"üìä –°—Ç–∞—Ç—É—Å: {status_name}\n"
        f"üë§ –ê–≤—Ç–æ—Ä: {project_data['user']}\n"
        f"üÜî ID: {project_data['id']}"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    buttons = ["üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç", "‚ùå –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç", "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", "üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫"]
    keyboard = create_keyboard(buttons)
    bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤"
@bot.message_handler(func=lambda message: message.text == "üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤")
def show_projects(message):
    projects = data["Projects"]["Project_list"]
    if not projects:
        bot.send_message(message.chat.id, "üì≠ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø—É—Å—Ç.")
    else:
        for project_name, project_data in projects.items():
            formatted_project = format_project(project_name, project_data)
            bot.send_message(message.chat.id, formatted_project, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç"
@bot.message_handler(func=lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç")
def add_project_step1(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:")
    bot.register_next_step_handler(msg, add_project_step2)

def add_project_step2(message):
    project_name = message.text
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:")
    bot.register_next_step_handler(msg, add_project_step3, project_name)

def add_project_step3(message, project_name):
    desc = message.text
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–µ–∫—Ç:")
    bot.register_next_step_handler(msg, add_project_step4, project_name, desc)

def add_project_step4(message, project_name, desc):
    irl = message.text
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–≤—ã–∫–æ–≤
    skills = list(data["skill_id"].keys())
    keyboard = create_keyboard(skills + ["‚úÖ –ì–æ—Ç–æ–≤–æ"])
    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–≤—ã–∫–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):", reply_markup=keyboard)
    bot.register_next_step_handler(msg, add_project_step5, project_name, desc, irl, [])

def add_project_step5(message, project_name, desc, irl, selected_skills):
    if message.text != "‚úÖ –ì–æ—Ç–æ–≤–æ":
        skill = message.text
        if skill in data["skill_id"]:
            selected_skills.append(data["skill_id"][skill])
        msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –µ—â–µ –Ω–∞–≤—ã–∫–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ì–æ—Ç–æ–≤–æ':", reply_markup=create_keyboard(list(data["skill_id"].keys()) + ["‚úÖ –ì–æ—Ç–æ–≤–æ"]))
        bot.register_next_step_handler(msg, add_project_step5, project_name, desc, irl, selected_skills)
    else:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞
        statuses = list(data["Status_id"].keys())
        keyboard = create_keyboard(statuses)
        msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞:", reply_markup=keyboard)
        bot.register_next_step_handler(msg, add_project_step6, project_name, desc, irl, selected_skills)

def add_project_step6(message, project_name, desc, irl, selected_skills):
    status = message.text
    if status in data["Status_id"]:
        status_id = data["Status_id"][status]
        logic.new_project(data, project_name, desc, irl, selected_skills, status_id)
        logic.update_json("tbl.json", data)
        bot.send_message(message.chat.id, f"‚úÖ –ü—Ä–æ–µ–∫—Ç '{project_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=create_keyboard(["üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç", "‚ùå –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç", "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", "üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫"]))
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚ùå –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç"
@bot.message_handler(func=lambda message: message.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç")
def delete_project_step1(message):
    projects = data["Projects"]["Project_list"]
    if not projects:
        bot.send_message(message.chat.id, "üì≠ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø—É—Å—Ç. –ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å.")
    else:
        keyboard = create_keyboard(list(projects.keys()) + ["‚ùå –û—Ç–º–µ–Ω–∞"])
        msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)
        bot.register_next_step_handler(msg, delete_project_step2)

def delete_project_step2(message):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        bot.send_message(message.chat.id, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=create_keyboard(["üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç", "‚ùå –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç", "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", "üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫"]))
    else:
        project_name = message.text
        try:
            logic.delete_project(data, project_name)
            logic.update_json("tbl.json", data)
            bot.send_message(message.chat.id, f"‚úÖ –ü—Ä–æ–µ–∫—Ç '{project_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!", reply_markup=create_keyboard(["üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç", "‚ùå –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç", "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", "üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫"]))
        except KeyError:
            bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å"
@bot.message_handler(func=lambda message: message.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å")
def update_status_step1(message):
    projects = data["Projects"]["Project_list"]
    if not projects:
        bot.send_message(message.chat.id, "üì≠ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø—É—Å—Ç. –ù–µ—á–µ–≥–æ –æ–±–Ω–æ–≤–ª—è—Ç—å.")
    else:
        keyboard = create_keyboard(list(projects.keys()) + ["‚ùå –û—Ç–º–µ–Ω–∞"])
        msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:", reply_markup=keyboard)
        bot.register_next_step_handler(msg, update_status_step2)

def update_status_step2(message):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        bot.send_message(message.chat.id, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=create_keyboard(["üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç", "‚ùå –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç", "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", "üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫"]))
    else:
        project_name = message.text
        if project_name in data["Projects"]["Project_list"]:
            statuses = list(data["Status_id"].keys())
            keyboard = create_keyboard(statuses + ["‚ùå –û—Ç–º–µ–Ω–∞"])
            msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:", reply_markup=keyboard)
            bot.register_next_step_handler(msg, update_status_step3, project_name)
        else:
            bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

def update_status_step3(message, project_name):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        bot.send_message(message.chat.id, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=create_keyboard(["üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç", "‚ùå –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç", "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", "üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫"]))
    else:
        status = message.text
        if status in data["Status_id"]:
            data["Projects"]["Project_list"][project_name]["status_id"] = data["Status_id"][status]
            logic.update_json("tbl.json", data)
            bot.send_message(message.chat.id, f"‚úÖ –°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞ '{project_name}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '{status}'!", reply_markup=create_keyboard(["üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç", "‚ùå –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç", "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", "üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫"]))
        else:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫"
@bot.message_handler(func=lambda message: message.text == "üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫")
def clear_projects(message):
    logic.clear_projects(data)
    logic.update_json("tbl.json", data)
    bot.send_message(message.chat.id, "‚úÖ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω!")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()